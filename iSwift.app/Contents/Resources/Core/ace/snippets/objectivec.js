ace.define("ace/snippets/objectivec",["require","exports","module"],function(e,t,n){"use strict";t.snippetText='snippet Imp\n	#import <${1:Cocoa/Cocoa.h}>\n# #import ""\nsnippet imp\n	#import "$1"\n# NSArray\nsnippet array\n	NSMutableArray *${1:array} = [NSMutableArray array];\n# NSDictionary\nsnippet dict\n	NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];\n# @selector(…)\nsnippet sel\n	@selector(${1:method}:)\n# Class Interface\nsnippet clh\n	@interface $1 : ${2:NSObject}\n	{$3\n	}\n	$0\n	@end\n# Detach New NSThread\nsnippet thread\n	[NSThread detachNewThreadSelector:@selector(${1:method}:) toTarget:${2:aTarget} withObject:${3:anArgument}]\n# Bind Property to Key Path of Object\nsnippet bind\n	bind:@"${2:binding}" toObject:${3:observableController} withKeyPath:@"${4:keyPath}" options:${5:nil}\n# Lock Focus\nsnippet focus\n	[self lockFocus];\n	$0\n	[self unlockFocus];\n# Autorelease Pool\nsnippet pool\n	@autoreleasepool {\n	    $0\n	}\n# NSBezierPath\nsnippet bez\n	NSBezierPath *${1:path} = [NSBezierPath bezierPath];\n	$0\n# NSString With Format\nsnippet format\n	[NSString stringWithFormat:@"$1", $2]$0\n# Read Defaults Value\nsnippet getprefs\n	[[NSUserDefaults standardUserDefaults] objectForKey:${1:key}];\n# Save and Restore Graphics Context\nsnippet gsave\n	[NSGraphicsContext saveGraphicsState];\n	$0\n	[NSGraphicsContext restoreGraphicsState];\n	\n# Write Defaults Value\nsnippet setprefs\n	[[NSUserDefaults standardUserDefaults] setObject:${1:object} forKey:${2:key}];\n# for(… in …)\nsnippet forin\n	for(${1:id} ${2:item} in ${3:array})\n	{\n		$0\n	}\n# #ifndef … #define … #endif\nsnippet def\n	#ifndef ${1:SYMBOL}\n	#define $1 ${2:value}\n#endif\n# #include <>\nsnippet Inc\n	#include <${1:.h}>\n# #include ""\nsnippet inc\n	#include "${1:.h}"\n# main()\nsnippet main\n	int main(int argc, char const *argv[]) {\n		${1:/* code */}\n		return 0;\n	}\n# For Loop\nsnippet for\n	for (size_t ${1:i} = 0; $1 < ${2:count}; $1${3:++}) {\n		${4:/* code */}\n	}\n# Header Include-Guard\nsnippet once\n	#ifndef ${1:SYMBOL}\n	#define $1\n	\n	${2}\n	\n	#endif /* end of include guard: $1 */\n\n# Shared Pointer\nsnippet sp\n	typedef std::shared_ptr<${2:${1:my_type}_t}> ${3:${4:my_type}_ptr};\n# Typedef\nsnippet td\n	typedef ${1:int} ${2:MyCustomType};\n# Do While Loop\nsnippet do\n	do {\n		${0:/* code */}\n	} while(${1:/* condition */});\n# While Loop\nsnippet while\n	while (${1:/* condition */}) {\n		${2:/* code */}\n	}\n# fprintf\nsnippet fprintf\n	fprintf(${1:stderr}, "${2:%s}\\n", $3);$4\n# If Condition\nsnippet if\nif (${1:/* condition */}) {\n		${2:/* code */}\n	}\n# If Else\nsnippet ife\n	if (${1:/* condition */}) {\n		${2:/* code */}\n	}\n	else {\n		${3:/* code */}\n	}\n# If ElseIf\nsnippet iff\n	if (${1:/* condition */}) {\n		${2:/* code */}\n	}\n	else if (${3:/* condition */}) {\n		${4:/* code */}\n	}\n# If ElseIf Else\nsnippet iffe\n	if (${1:/* condition */}) {\n		${2:/* code */}\n	}\n	else if (${3:/* condition */}) {\n		${4:/* code */}\n	}\n	else {\n		${5:/* code */}\n	}\n# Switch Statement\nsnippet switch\n	switch (${1:/* expression */}) {\n		case ${2:/* value */}:\n	}\n# case\nsnippet cs\n	case ${1:/* value */}:$0',t.scope="objectivec"})